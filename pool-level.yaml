# Pool level sensor based upon a 240-33Ω Level sensor mounted on a skimmer lid
# Processor is a esp32-c3 seeed studio xiao module
# Vbat on the back of the board is connected to an 18650 LiIon cell
# Vbuss is connected to a 5VDC solar cell
# D0/A0/GPIO2 is connected to Vbat+ via a 100k/100k divider 

# VL53L0X ToF sensor on I2C
# Red 3.3V
# Shield Gnd
# White SCL, GPIO7
# Green SDA, GPIO6
# Black XSHUT, GPIO21, Active low shutdown

# Deep sleep current, around 60uA with the level sensor connected
# Awake current 30-80mA

substitutions:
  me: "pool-level"

esphome:
  name: ${me}
  comment: seeed esp32c3
  area: Pool
  on_boot:
#    - priority: -800
#      then:
#        - lambda: |-
#            digitalWrite(9, HIGH);
#            digitalWrite(21, HIGH);
    - priority: 0
      then:
        - deep_sleep.prevent: sleeper

esp32:
  board: seeed_xiao_esp32c3
  framework:
    type: esp-idf

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  reboot_timeout: 60s
  id: wifi_id
  manual_ip: 
    static_ip: 192.168.2.26
    gateway: 192.168.2.1
    subnet: 255.255.255.0
    dns1: 192.168.2.1

web_server:
  version: 2

logger:
  level: DEBUG
  logs:
    sensor: ERROR
    dallas.temp.sensor: ERROR
    vl53l0x: WARN

api:
  encryption:
    key: !secret esp_api_key
  batch_delay: 0ms

ota:
  - platform: esphome
    password: !secret esp_ota_pw
    id: my_ota

deep_sleep:
  id: sleeper
  sleep_duration: 300s # Dummy value, should never be used
  run_duration: 60s # Ditto. just for when there is no cmd/set msg to be had.

globals:
  - id: pub_count
    type: int
    initial_value: "0"

script:
  - id: bedtime
    mode: queued
    then:
      - delay: 50ms
      - lambda: |-
          ESP_LOGD("bedtime", "millis:%d, pub_count:%0x, sleep_duration:%f", millis(), id(pub_count), id(sleep_duration).state);
          bool connected = ! std::isnan(id(sleep_duration).state);
          if (id(pub_count) == 0xf && id(sleep_duration).state > 0 && connected)
          {
            id(pub_count) = 0;
            id(sleeper).set_sleep_duration(id(sleep_duration).state * 1000);
            id(sleeper).begin_sleep(true);
          }

text_sensor:
  - platform: version
    name: ${me} ESPHome Version

switch:
  - platform: restart
    name: ${me} restart

i2c:
  sda: GPIO6
  scl: GPIO7

one_wire:
  - platform: gpio
    pin: GPIO10

sensor:
  - platform: wifi_signal
    name: ${me} wifi signal
    id: snr
    update_interval: 5s
    on_value:
      then:
        - lambda: 'id(pub_count) |= 0x1;'
        - script.execute: bedtime

  - platform: homeassistant
    entity_id: input_select.sleep_duration
    id: sleep_duration

  - platform: internal_temperature
    name: ${me} internal temperature
    id: temp
    update_interval: 500ms
    filters:
      - filter_out: NAN
      - sliding_window_moving_average:
          window_size: 10
          send_every: 10
          send_first_at: 10
    on_value:
      then:
        - lambda: 'id(pub_count) |= 0x2;'
        - script.execute: bedtime

  - platform: adc
    # aka D0, Has a 100k/100k resistive divider to Vbat
    # Also note that the battery voltage drops about .15 V when under the 80mA load
    pin: GPIO2
    name: ${me} vbat
    id: vbat
    attenuation: 12db # full scale is 4.2V
    accuracy_decimals: 2
    update_interval: 500ms
    filters:
      - multiply: 2
      - sliding_window_moving_average:
          window_size: 10
          send_every: 10
          send_first_at: 10
      - filter_out: NAN
    on_value:
      then:
        - lambda: 'id(pub_count) |= 0x4;'
        - script.execute: bedtime

  - platform: vl53l0x
    name: ${me} level
    address: 0x29
    update_interval: 400ms
    unit_of_measurement: "m"
    accuracy_decimals: 4
    long_range: false
    timing_budget: 300ms
    enable_pin: 21
    signal_rate_limit: 50
    filters:
       - sliding_window_moving_average:
          window_size: 10
          send_every: 10
          send_first_at: 10
       - filter_out: NAN
    on_value:
      then:
        - lambda: 'id(pub_count) |= 0x8;'
        - script.execute: bedtime

  - platform: dallas_temp
    address: 0xd63c01d075a4ef28
    name: ${me} water temperature
    accuracy_decimals: 2
    update_interval: 5s
    unit_of_measurement: °C
    filters:
      - filter_out: NAN
