# Pool level sensor based upon a 240-33Î© Level sensor mounted on a skimmer lid
# Processor is a esp32-c3 seeed studio xiao module
# Vbat on the back of the board is connected to an 18650 LiIon cell
# Vbuss is connected to a 5VDC solar cell
# D0/A0/GPIO2 is connected to Vbat+ via a 100k/100k divider 

# VL53L0X ToF sensor on I2C
# Red 3.3V
# Shield Gnd
# White SCL, GPIO7
# Green SDA, GPIO6
# Black XSHUT, GPIO21, Active low shutdown

# Deep sleep current, around 60uA with the level sensor connected
# Awake current 30-80mA

substitutions:
  me: "pool-level"

esphome:
  name: ${me}
  comment: seeed esp32c3
  area: Pool
  on_boot:
    - priority: -50
      then:
        - mqtt.publish: 
            topic: ${me}/status
            qos: 1
            payload: "online"
        - lambda: |-
            ESP_LOGI("boot", "millis:%d, sleep_duration:%d, pub_count:%0x", millis(), id(sleep_duration), id(pub_count));

esp32:
  board: seeed_xiao_esp32c3
  framework:
    type: arduino

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  reboot_timeout: 60s
  id: wifi_id
  manual_ip: 
    static_ip: 192.168.2.26
    gateway: 192.168.2.1
    subnet: 255.255.255.0
    dns1: 192.168.2.1

logger:
  level: INFO

ota:
  - platform: esphome
    password: !secret esp_ota_pw
    id: my_ota

globals:
  - id: pub_count
    type: int
    initial_value: "0"
  - id: sleep_duration
    type: long
    initial_value: "66"

script:
  - id: check_all_published
    mode: queued
    then:
      - lambda: |-
          if (id(sleep_duration) > 0 && id(pub_count) == 0x1f && id(mqtt_client)->is_connected())
          {
            ESP_LOGI("check", "millis:%d, pub_count:%0x", millis(), id(pub_count));
            id(pub_count) = 0;
            id(sleeper).set_sleep_duration(id(sleep_duration) * 1000);
            // manually controling 21 as opposed to using the enable_pin option didn't seem to work...
            digitalWrite(21, LOW);
            id(sleeper).begin_sleep(true);
          }

mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_username
  password: !secret mqtt_password
  id: mqtt_client
  discovery: true
  # Set these empty so the device is not marked missing by home assistant
  will_message:
  birth_message:
  shutdown_message: 
    topic: ${me}/status
    payload: "offline"
    qos: 1
  on_json_message: 
    topic: ${me}/cmd/set
    then:
      - globals.set:
          id: sleep_duration
          value: !lambda |-
            long duration = id(sleep_duration);
            if (x.containsKey("sleep_duration"))
            {
              id(pub_count) |= 0x8;
              duration = long(x["sleep_duration"]);
              id(sleeper).prevent_deep_sleep();
              ESP_LOGI("main", "Rx cmd/set, sleep_duration to %d seconds.", duration);
            }
            return duration;

deep_sleep:
  id: sleeper
  sleep_duration: 300s # Dummy value, should never be used
  run_duration: 60s # Ditto. just for when there is no cmd/set msg to be had.

i2c:
  sda: GPIO6
  scl: GPIO7

sensor:
  - platform: wifi_signal
    name: ${me} wifi signal
    id: snr
    update_interval: 1s
    qos: 1
    on_value:
      then:
        - lambda: 'id(pub_count) |= 0x1;'
        - script.execute: check_all_published

  - platform: internal_temperature
    name: ${me} internal temperature
    id: temp
    update_interval: 1s
    qos: 1
    on_value:
      then:
        - lambda: 'id(pub_count) |= 0x2;'
        - script.execute: check_all_published

  - platform: adc
    # aka D0, Has a 100k/100k resistive divider to Vbat
    # Also note that the battery voltage drops about .15 V when under the 80mA load
    pin: GPIO2
    name: ${me} vbat
    id: vbat
    attenuation: 12db # full scale is 4.2V
    accuracy_decimals: 2
    update_interval: 100ms
    qos: 1
    filters:
      - multiply: 2
      - sliding_window_moving_average:
          window_size: 10
          send_every: 10
          send_first_at: 10
    on_value:
      then:
        - lambda: 'id(pub_count) |= 0x4;'
        - script.execute: check_all_published

  - platform: vl53l0x
    name: ${me} level
    address: 0x29
    update_interval: 100ms
    unit_of_measurement: "m"
    accuracy_decimals: 4
    long_range: false
    enable_pin: GPIO21
    qos: 1
    filters:
      - sliding_window_moving_average:
          window_size: 10
          send_every: 10
          send_first_at: 10
    on_value:
      then:
        - lambda: 'id(pub_count) |= 0x10;'
        - script.execute: check_all_published
